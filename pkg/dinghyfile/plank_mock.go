// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/plank.go

// Package dinghyfile is a generated GoMock package.
package dinghyfile

import (
	reflect "reflect"

	plank "github.com/armory/plank/v4"
	gomock "github.com/golang/mock/gomock"
)

// MockPlankClient is a mock of PlankClient interface.
type MockPlankClient struct {
	ctrl     *gomock.Controller
	recorder *MockPlankClientMockRecorder
}

// MockPlankClientMockRecorder is the mock recorder for MockPlankClient.
type MockPlankClientMockRecorder struct {
	mock *MockPlankClient
}

// NewMockPlankClient creates a new mock instance.
func NewMockPlankClient(ctrl *gomock.Controller) *MockPlankClient {
	mock := &MockPlankClient{ctrl: ctrl}
	mock.recorder = &MockPlankClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlankClient) EXPECT() *MockPlankClientMockRecorder {
	return m.recorder
}

// ArmoryEndpointsEnabled mocks base method.
func (m *MockPlankClient) ArmoryEndpointsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArmoryEndpointsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ArmoryEndpointsEnabled indicates an expected call of ArmoryEndpointsEnabled.
func (mr *MockPlankClientMockRecorder) ArmoryEndpointsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArmoryEndpointsEnabled", reflect.TypeOf((*MockPlankClient)(nil).ArmoryEndpointsEnabled))
}

// CreateApplication mocks base method.
func (m *MockPlankClient) CreateApplication(arg0 *plank.Application, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockPlankClientMockRecorder) CreateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockPlankClient)(nil).CreateApplication), arg0, arg1)
}

// DeletePipeline mocks base method.
func (m *MockPlankClient) DeletePipeline(arg0 plank.Pipeline, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockPlankClientMockRecorder) DeletePipeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockPlankClient)(nil).DeletePipeline), arg0, arg1)
}

// EnableArmoryEndpoints mocks base method.
func (m *MockPlankClient) EnableArmoryEndpoints() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EnableArmoryEndpoints")
}

// EnableArmoryEndpoints indicates an expected call of EnableArmoryEndpoints.
func (mr *MockPlankClientMockRecorder) EnableArmoryEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableArmoryEndpoints", reflect.TypeOf((*MockPlankClient)(nil).EnableArmoryEndpoints))
}

// GetApplication mocks base method.
func (m *MockPlankClient) GetApplication(arg0, arg1 string) (*plank.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", arg0, arg1)
	ret0, _ := ret[0].(*plank.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockPlankClientMockRecorder) GetApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockPlankClient)(nil).GetApplication), arg0, arg1)
}

// GetApplicationNotifications mocks base method.
func (m *MockPlankClient) GetApplicationNotifications(arg0, arg1 string) (*plank.NotificationsType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNotifications", arg0, arg1)
	ret0, _ := ret[0].(*plank.NotificationsType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationNotifications indicates an expected call of GetApplicationNotifications.
func (mr *MockPlankClientMockRecorder) GetApplicationNotifications(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNotifications", reflect.TypeOf((*MockPlankClient)(nil).GetApplicationNotifications), arg0, arg1)
}

// GetPipelines mocks base method.
func (m *MockPlankClient) GetPipelines(arg0, arg1 string) ([]plank.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelines", arg0, arg1)
	ret0, _ := ret[0].([]plank.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelines indicates an expected call of GetPipelines.
func (mr *MockPlankClientMockRecorder) GetPipelines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelines", reflect.TypeOf((*MockPlankClient)(nil).GetPipelines), arg0, arg1)
}

// ResyncFiat mocks base method.
func (m *MockPlankClient) ResyncFiat(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResyncFiat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResyncFiat indicates an expected call of ResyncFiat.
func (mr *MockPlankClientMockRecorder) ResyncFiat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResyncFiat", reflect.TypeOf((*MockPlankClient)(nil).ResyncFiat), arg0)
}

// UpdateApplication mocks base method.
func (m *MockPlankClient) UpdateApplication(arg0 plank.Application, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockPlankClientMockRecorder) UpdateApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockPlankClient)(nil).UpdateApplication), arg0, arg1)
}

// UpdateApplicationNotifications mocks base method.
func (m *MockPlankClient) UpdateApplicationNotifications(arg0 plank.NotificationsType, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicationNotifications", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicationNotifications indicates an expected call of UpdateApplicationNotifications.
func (mr *MockPlankClientMockRecorder) UpdateApplicationNotifications(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationNotifications", reflect.TypeOf((*MockPlankClient)(nil).UpdateApplicationNotifications), arg0, arg1, arg2)
}

// UpsertPipeline mocks base method.
func (m *MockPlankClient) UpsertPipeline(arg0 plank.Pipeline, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPipeline", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPipeline indicates an expected call of UpsertPipeline.
func (mr *MockPlankClientMockRecorder) UpsertPipeline(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPipeline", reflect.TypeOf((*MockPlankClient)(nil).UpsertPipeline), arg0, arg1, arg2)
}

// UseGateEndpoints mocks base method.
func (m *MockPlankClient) UseGateEndpoints() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseGateEndpoints")
}

// UseGateEndpoints indicates an expected call of UseGateEndpoints.
func (mr *MockPlankClientMockRecorder) UseGateEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseGateEndpoints", reflect.TypeOf((*MockPlankClient)(nil).UseGateEndpoints))
}

// UseServiceEndpoints mocks base method.
func (m *MockPlankClient) UseServiceEndpoints() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseServiceEndpoints")
}

// UseServiceEndpoints indicates an expected call of UseServiceEndpoints.
func (mr *MockPlankClientMockRecorder) UseServiceEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseServiceEndpoints", reflect.TypeOf((*MockPlankClient)(nil).UseServiceEndpoints))
}

// GetPipelines mocks base method.
func (m *MockPlankClient) UserRoles(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRoles", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelines indicates an expected call of GetPipelines.
func (mr *MockPlankClientMockRecorder) UserRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRoles", reflect.TypeOf((*MockPlankClient)(nil).UserRoles), arg0, arg1)
}
